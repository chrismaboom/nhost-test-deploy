export declare const useChangeEmail: (stateEmail?: string | undefined, stateOptions?: {
    redirectTo?: string | undefined;
} | undefined) => {
    changeEmail: (valueEmail?: string | unknown, valueOptions?: {
        redirectTo?: string | undefined;
    } | undefined) => import("xstate").State<import("@nhost/client").ChangeEmailContext, import("@nhost/client").ChangeEmailEvents, any, any, import("@nhost/client/src/machines/change-email.typegen").Typegen0 & {
        indexedActions: import("xstate").IndexByType<import("xstate").BaseActionObject>;
        indexedEvents: import("xstate").IndexByType<import("@nhost/client").ChangeEmailEvents> & Pick<{
            'error.platform.requestChange': {
                type: "error.platform.requestChange";
                data: unknown;
            };
            'xstate.init': {
                type: "xstate.init";
            };
            'done.invoke.requestChange': {
                type: "done.invoke.requestChange";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
        }, "xstate.init" | "error.platform.requestChange" | "done.invoke.requestChange">;
    }>;
    isLoading: boolean;
    needsVerification: boolean;
    isError: boolean;
    error: import("@nhost/client/src/errors").ErrorPayload | null;
};
export declare const useChangePassword: (statePassword?: string | undefined) => {
    changePassword: (valuePassword?: string | unknown) => import("xstate").State<import("@nhost/client").ChangePasswordContext, import("@nhost/client").ChangePasswordEvents, any, any, import("@nhost/client/src/machines/change-password.typegen").Typegen0 & {
        indexedActions: import("xstate").IndexByType<import("xstate").BaseActionObject>;
        indexedEvents: import("xstate").IndexByType<import("@nhost/client").ChangePasswordEvents> & Pick<{
            'error.platform.requestChange': {
                type: "error.platform.requestChange";
                data: unknown;
            };
            'xstate.init': {
                type: "xstate.init";
            };
            'done.invoke.requestChange': {
                type: "done.invoke.requestChange";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
        }, "xstate.init" | "error.platform.requestChange" | "done.invoke.requestChange">;
    }>;
    isLoading: boolean;
    isSuccess: boolean;
    isError: boolean;
    error: import("@nhost/client/src/errors").ErrorPayload | null;
};
export declare const useResetPassword: (stateEmail?: string | undefined, stateOptions?: {
    redirectTo?: string | undefined;
} | undefined) => {
    resetPassword: (valueEmail?: string | unknown, valueOptions?: {
        redirectTo?: string | undefined;
    } | undefined) => import("xstate").State<import("@nhost/client").ResetPasswordContext, import("@nhost/client").ResetPasswordEvents, any, any, import("@nhost/client/src/machines/reset-password.typegen").Typegen0 & {
        indexedActions: import("xstate").IndexByType<import("xstate").BaseActionObject>;
        indexedEvents: import("xstate").IndexByType<import("@nhost/client").ResetPasswordEvents> & Pick<{
            'error.platform.requestChange': {
                type: "error.platform.requestChange";
                data: unknown;
            };
            'xstate.init': {
                type: "xstate.init";
            };
            'done.invoke.requestChange': {
                type: "done.invoke.requestChange";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
        }, "xstate.init" | "error.platform.requestChange" | "done.invoke.requestChange">;
    }>;
    isLoading: boolean;
    isSent: boolean;
    isError: boolean;
    error: import("@nhost/client/src/errors").ErrorPayload | null;
};
export declare const useUserData: () => import("@nhost/client").User | null;
export declare const useAvatarUrl: () => string | undefined;
export declare const useDefaultRole: () => string | undefined;
export declare const useDisplayName: () => string | undefined;
export declare const useEmail: () => string | undefined;
export declare const useUserId: () => string | undefined;
export declare const useIsAnonymous: () => boolean | undefined;
export declare const useUserLocale: () => string | undefined;
export declare const useUserRoles: () => string[];
