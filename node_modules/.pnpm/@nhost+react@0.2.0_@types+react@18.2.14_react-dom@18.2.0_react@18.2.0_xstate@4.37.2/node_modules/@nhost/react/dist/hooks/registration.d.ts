import { SignUpOptions } from '@nhost/client';
export declare const useEmailPasswordSignUp: (stateEmail?: string | undefined, statePassword?: string | undefined, stateOptions?: SignUpOptions | undefined) => {
    signUp: (valueEmail?: string | unknown, valuePassword?: string | undefined, valueOptions?: SignUpOptions | undefined) => import("xstate").State<import("@nhost/client").NhostContext, {
        type: "SESSION_UPDATE";
        data: {
            session: import("@nhost/client").NhostSession;
        };
    } | {
        type: "TRY_TOKEN";
        token: string;
    } | {
        type: "SIGNIN_ANONYMOUS";
    } | {
        type: "SIGNIN_PASSWORD";
        email?: string | undefined;
        password?: string | undefined;
    } | {
        type: "SIGNIN_PASSWORDLESS_EMAIL";
        email?: string | undefined;
        options?: import("@nhost/client").PasswordlessOptions | undefined;
    } | {
        type: "SIGNUP_EMAIL_PASSWORD";
        email?: string | undefined;
        password?: string | undefined;
        options?: SignUpOptions | undefined;
    } | {
        type: "TOKEN_REFRESH_ERROR";
        error: import("@nhost/client/src/errors").ErrorPayload;
    } | {
        type: "SIGNOUT";
        all?: boolean | undefined;
    }, any, any, import("@nhost/client/src/machines/index.typegen").Typegen0 & {
        indexedActions: import("xstate").IndexByType<import("xstate").BaseActionObject>;
        indexedEvents: import("xstate").IndexByType<{
            type: "SESSION_UPDATE";
            data: {
                session: import("@nhost/client").NhostSession;
            };
        } | {
            type: "TRY_TOKEN";
            token: string;
        } | {
            type: "SIGNIN_ANONYMOUS";
        } | {
            type: "SIGNIN_PASSWORD";
            email?: string | undefined;
            password?: string | undefined;
        } | {
            type: "SIGNIN_PASSWORDLESS_EMAIL";
            email?: string | undefined;
            options?: import("@nhost/client").PasswordlessOptions | undefined;
        } | {
            type: "SIGNUP_EMAIL_PASSWORD";
            email?: string | undefined;
            password?: string | undefined;
            options?: SignUpOptions | undefined;
        } | {
            type: "TOKEN_REFRESH_ERROR";
            error: import("@nhost/client/src/errors").ErrorPayload;
        } | {
            type: "SIGNOUT";
            all?: boolean | undefined;
        }> & Pick<{
            'done.invoke.autoSignIn': {
                type: "done.invoke.autoSignIn";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
            'done.invoke.authenticateUserWithPassword': {
                type: "done.invoke.authenticateUserWithPassword";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
            'done.invoke.authenticateAnonymously': {
                type: "done.invoke.authenticateAnonymously";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
            'done.invoke.registerUser': {
                type: "done.invoke.registerUser";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
            'done.invoke.refreshToken': {
                type: "done.invoke.refreshToken";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
            'done.invoke.authenticateWithToken': {
                type: "done.invoke.authenticateWithToken";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
            '': {
                type: "";
            };
            'error.platform.registerUser': {
                type: "error.platform.registerUser";
                data: unknown;
            };
            'xstate.after(1000)#nhost.authentication.signedIn.refreshTimer.running.pending': {
                type: "xstate.after(1000)#nhost.authentication.signedIn.refreshTimer.running.pending";
            };
            'error.platform.signingOut': {
                type: "error.platform.signingOut";
                data: unknown;
            };
            'error.platform.authenticatePasswordlessEmail': {
                type: "error.platform.authenticatePasswordlessEmail";
                data: unknown;
            };
            'error.platform.authenticateUserWithPassword': {
                type: "error.platform.authenticateUserWithPassword";
                data: unknown;
            };
            'error.platform.authenticateAnonymously': {
                type: "error.platform.authenticateAnonymously";
                data: unknown;
            };
            'xstate.init': {
                type: "xstate.init";
            };
            'error.platform.autoSignIn': {
                type: "error.platform.autoSignIn";
                data: unknown;
            };
            'done.invoke.signingOut': {
                type: "done.invoke.signingOut";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
            'done.invoke.authenticatePasswordlessEmail': {
                type: "done.invoke.authenticatePasswordlessEmail";
                data: unknown;
                __tip: "See the XState TS docs to learn how to strongly type this.";
            };
            'error.platform.refreshToken': {
                type: "error.platform.refreshToken";
                data: unknown;
            };
            'error.platform.authenticateWithToken': {
                type: "error.platform.authenticateWithToken";
                data: unknown;
            };
        }, "" | "done.invoke.autoSignIn" | "done.invoke.authenticateUserWithPassword" | "done.invoke.authenticateAnonymously" | "done.invoke.registerUser" | "done.invoke.refreshToken" | "done.invoke.authenticateWithToken" | "error.platform.registerUser" | "xstate.after(1000)#nhost.authentication.signedIn.refreshTimer.running.pending" | "error.platform.signingOut" | "error.platform.authenticatePasswordlessEmail" | "error.platform.authenticateUserWithPassword" | "error.platform.authenticateAnonymously" | "xstate.init" | "error.platform.autoSignIn" | "done.invoke.signingOut" | "done.invoke.authenticatePasswordlessEmail" | "error.platform.refreshToken" | "error.platform.authenticateWithToken">;
    }>;
    isLoading: boolean;
    isSuccess: boolean;
    isError: boolean;
    error: import("@nhost/client/src/errors").ErrorPayload | undefined;
    needsVerification: boolean;
};
