"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateApolloClient = generateApolloClient;
exports.NhostApolloProvider = void 0;

var _react = _interopRequireWildcard(require("react"));

var _apolloCacheInmemory = require("apollo-cache-inmemory");

var _client = require("@apollo/client");

var _linkContext = require("@apollo/link-context");

var _apolloLinkWs = require("apollo-link-ws");

var _apolloLinkHttp = require("apollo-link-http");

var _apolloLink = require("apollo-link");

var _apolloUtilities = require("apollo-utilities");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function generateApolloClient(auth, gqlEndpoint, headers) {
  var publicRole = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "public";

  var getheaders = function getheaders(auth) {
    var resHeaders = _objectSpread({}, headers);

    if (auth) {
      if (auth.isAuthenticated()) {
        resHeaders.authorization = "Bearer ".concat(auth.getJWTToken());
      } else {
        resHeaders.role = publicRole;
      }
    }

    return resHeaders;
  };

  var ssr = typeof window === "undefined";
  var uri = gqlEndpoint;
  var wsUri = uri.startsWith("https") ? uri.replace(/^https/, "wss") : uri.replace(/^http/, "ws");
  var wsLink = !ssr ? new _apolloLinkWs.WebSocketLink({
    uri: wsUri,
    options: {
      reconnect: true,
      lazy: true,
      connectionParams: function connectionParams() {
        var connectionHeaders = getheaders(auth);
        return {
          headers: connectionHeaders
        };
      }
    }
  }) : null;
  var httplink = (0, _apolloLinkHttp.createHttpLink)({
    uri: uri
  });
  var authLink = (0, _linkContext.setContext)(function (a, _ref) {
    var headers = _ref.headers;
    return {
      headers: _objectSpread(_objectSpread({}, headers), getheaders(auth))
    };
  });
  var link = !ssr ? (0, _apolloLink.split)(function (_ref2) {
    var query = _ref2.query;

    var _getMainDefinition = (0, _apolloUtilities.getMainDefinition)(query),
        kind = _getMainDefinition.kind,
        operation = _getMainDefinition.operation;

    return kind === "OperationDefinition" && operation === "subscription";
  }, wsLink, authLink.concat(httplink)) : httplink;
  var client = new _client.ApolloClient({
    ssr: ssr,
    link: (0, _apolloLink.from)([link]),
    cache: new _apolloCacheInmemory.InMemoryCache(),
    defaultOptions: {
      watchQuery: {
        fetchPolicy: "cache-and-network"
      }
    }
  });
  return {
    client: client,
    wsLink: wsLink
  };
}

var NhostApolloProvider = function (_React$Component) {
  _inherits(NhostApolloProvider, _React$Component);

  var _super = _createSuper(NhostApolloProvider);

  function NhostApolloProvider(props) {
    var _this;

    _classCallCheck(this, NhostApolloProvider);

    _this = _super.call(this, props);
    var _this$props = _this.props,
        auth = _this$props.auth,
        gqlEndpoint = _this$props.gqlEndpoint,
        headers = _this$props.headers,
        _this$props$publicRol = _this$props.publicRole,
        publicRole = _this$props$publicRol === void 0 ? "public" : _this$props$publicRol;

    var _generateApolloClient = generateApolloClient(auth, gqlEndpoint, headers, publicRole),
        client = _generateApolloClient.client,
        wsLink = _generateApolloClient.wsLink;

    _this.client = client;
    _this.wsLink = wsLink;

    if (_this.props.auth) {
      _this.props.auth.onTokenChanged(function () {
        if (_this.wsLink.subscriptionClient.status === 1) {
          _this.wsLink.subscriptionClient.tryReconnect();
        }
      });

      _this.props.auth.onAuthStateChanged(function (data) {
        if (_this.wsLink.subscriptionClient.status === 1) {
          _this.wsLink.subscriptionClient.close();

          _this.wsLink.subscriptionClient.tryReconnect();
        }
      });
    }

    return _this;
  }

  _createClass(NhostApolloProvider, [{
    key: "render",
    value: function render() {
      return _react["default"].createElement(_client.ApolloProvider, {
        client: this.client
      }, this.props.children);
    }
  }]);

  return NhostApolloProvider;
}(_react["default"].Component);

exports.NhostApolloProvider = NhostApolloProvider;