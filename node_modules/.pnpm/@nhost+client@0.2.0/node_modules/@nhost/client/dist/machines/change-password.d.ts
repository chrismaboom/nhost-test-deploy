import { Nhost } from '../client';
import { ErrorPayload } from '../errors';
export declare type ChangePasswordContext = {
    error: ErrorPayload | null;
};
export declare type ChangePasswordEvents = {
    type: 'REQUEST_CHANGE';
    password?: string;
};
export declare const createChangePasswordMachine: ({ backendUrl, interpreter }: Nhost) => import("xstate").StateMachine<ChangePasswordContext, any, ChangePasswordEvents, any, import("xstate").BaseActionObject, import("xstate").ServiceMap, import("./change-password.typegen").Typegen0 & {
    indexedActions: import("xstate").IndexByType<import("xstate").BaseActionObject>;
    indexedEvents: import("xstate").IndexByType<ChangePasswordEvents> & Pick<{
        'error.platform.requestChange': {
            type: "error.platform.requestChange";
            data: unknown;
        };
        'xstate.init': {
            type: "xstate.init";
        };
        'done.invoke.requestChange': {
            type: "done.invoke.requestChange";
            data: unknown;
            __tip: "See the XState TS docs to learn how to strongly type this.";
        };
    }, "error.platform.requestChange" | "xstate.init" | "done.invoke.requestChange">;
}>;
